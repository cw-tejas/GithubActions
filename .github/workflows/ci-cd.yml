name: CI Tests

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  test:
    name: Run All Tests
    runs-on: ubuntu-latest

    outputs:
      test-result: ${{ steps.test-step.outputs.result }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run all tests
        id: test-step
        run: |
          npm run test:run 2>&1 | tee test-output.log
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ All tests passed!" >> test-summary.md
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Tests failed!" >> test-summary.md
          fi
        continue-on-error: true

      - name: Generate test coverage
        if: always()
        run: |
          npm run test:coverage -- --reporter=json --reporter=text > coverage-output.log 2>&1 || true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-output.log
            coverage-output.log
            test-summary.md

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let testOutput = '';
            let testSummary = '';
            let coverageInfo = '';

            try {
              testOutput = fs.readFileSync('test-output.log', 'utf8');
            } catch (e) {
              testOutput = 'No test output available';
            }

            try {
              testSummary = fs.readFileSync('test-summary.md', 'utf8');
            } catch (e) {
              testSummary = 'No test summary available';
            }

            try {
              coverageInfo = fs.readFileSync('coverage-output.log', 'utf8');
            } catch (e) {
              coverageInfo = 'No coverage info available';
            }

            const testResult = '${{ steps.test-step.outputs.result }}';
            const emoji = testResult === 'success' ? '‚úÖ' : '‚ùå';
            const status = testResult === 'success' ? 'PASSED' : 'FAILED';
              const comment = `
            ## ${emoji} Test Results: ${status}

            ${testSummary}

            ### Test Output Summary
            \`\`\`
            ${testOutput.split('\n').slice(-20).join('\n')}
            \`\`\`

            ### Coverage Information
            \`\`\`
            ${coverageInfo.split('\n').slice(0, 10).join('\n')}
            \`\`\`

            ${testResult === 'failure' ? 
              '‚ö†Ô∏è **This PR cannot be merged until all tests pass.**' : 
              'üéâ **All tests passed! This PR is ready for review.**\n\nüí° **To merge this PR:** Comment `:runMerge` to trigger merge with unit tests.'
            }

            ---
            *Automated test run for commit ${context.sha.substring(0, 7)}*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  deploy-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && needs.test.outputs.test-result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: npm run build

      - name: Test production build
        run: |
          npm run preview &
          PID=$!
          sleep 5
          curl -f http://localhost:4173 || exit 1
          kill $PID

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: dist/
