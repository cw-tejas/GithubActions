name: Merge on Command

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  checks: write
  statuses: write

jobs:
  check-comment:
    name: Check Comment for Merge Command
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && contains(github.event.comment.body, ':runMerge')

    outputs:
      should-merge: ${{ steps.check-command.outputs.should-merge }}
      pr-number: ${{ steps.check-command.outputs.pr-number }}

    steps:
      - name: Check merge command
        id: check-command
        run: |
          echo "should-merge=true" >> $GITHUB_OUTPUT
          echo "pr-number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT

      - name: React to comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'eyes'
            });

  run-unit-tests:
    name: Run Unit Tests for Merge
    runs-on: ubuntu-latest
    needs: check-comment
    if: needs.check-comment.outputs.should-merge == 'true'

    outputs:
      test-result: ${{ steps.unit-test.outputs.result }}

    steps:
      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.check-comment.outputs.pr-number }}
            });

            core.setOutput('head-ref', pullRequest.head.ref);
            core.setOutput('head-sha', pullRequest.head.sha);
            return pullRequest;

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-details.outputs.head-sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests only
        id: unit-test
        run: |
          echo "üß™ Running unit tests for merge validation..." | tee unit-test-output.log

          # Run only unit tests (App.test.jsx and counterUtils.test.js)
          npx vitest run src/App.test.jsx src/utils/counterUtils.test.js 2>&1 | tee -a unit-test-output.log

          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Unit tests passed for merge!" >> unit-test-summary.md
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Unit tests failed for merge!" >> unit-test-summary.md
          fi
        continue-on-error: true

      - name: Comment unit test results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let testOutput = '';
            let testSummary = '';

            try {
              testOutput = fs.readFileSync('unit-test-output.log', 'utf8');
            } catch (e) {
              testOutput = 'No test output available';
            }

            try {
              testSummary = fs.readFileSync('unit-test-summary.md', 'utf8');
            } catch (e) {
              testSummary = 'No test summary available';
            }

            const testResult = '${{ steps.unit-test.outputs.result }}';
            const emoji = testResult === 'success' ? '‚úÖ' : '‚ùå';
            const status = testResult === 'success' ? 'PASSED' : 'FAILED';

            const comment = `
            ## ${emoji} Merge Unit Tests: ${status}

            **Triggered by:** @${{ github.event.comment.user.login }} with \`:runMerge\` command

            ${testSummary}

            ### Unit Test Output
            \`\`\`
            ${testOutput.split('\n').slice(-15).join('\n')}
            \`\`\`

            ${testResult === 'success' ? 
              'üéâ **Unit tests passed! Proceeding with merge...**' : 
              '‚ùå **Merge failed due to failed unit tests.**\n\nPlease fix the failing tests and try again.'
            }

            ---
            *Unit test validation for merge command*
            `;

            await github.rest.issues.createComment({
              issue_number: ${{ needs.check-comment.outputs.pr-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  merge-pr:
    name: Merge PR
    runs-on: ubuntu-latest
    needs: [check-comment, run-unit-tests]
    if: needs.run-unit-tests.outputs.test-result == 'success'

    steps:
      - name: Merge PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ needs.check-comment.outputs.pr-number }};

            try {
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              if (!pullRequest.mergeable) {
                throw new Error('PR is not mergeable. Please resolve conflicts first.');
              }
              
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                commit_title: `Merge: ${pullRequest.title}`,
                commit_message: `Merged via :runMerge command after unit tests passed.\n\nPR #${prNumber}: ${pullRequest.title}\nTriggered by: @${{ github.event.comment.user.login }}`,
                merge_method: 'squash'
              });
              
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'üéâ **PR successfully merged!** \n\n‚úÖ Unit tests passed\nüîÄ Merged via `:runMerge` command\nüë§ Triggered by: @${{ github.event.comment.user.login }}'
              });
              
              // React to the original comment with success
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'rocket'
              });
              
            } catch (error) {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ùå **Merge failed:** ${error.message}\n\nPlease resolve the issue and try again with \`:runMerge\`.`
              });
              
              // React to the original comment with failure
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'confused'
              });
              
              throw error;
            }

  merge-failed:
    name: Handle Merge Failure
    runs-on: ubuntu-latest
    needs: [check-comment, run-unit-tests]
    if: needs.run-unit-tests.outputs.test-result == 'failure'

    steps:
      - name: Comment merge failure
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: ${{ needs.check-comment.outputs.pr-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **Merge failed due to failed unit tests.**\n\nThe following unit tests must pass before merging:\n- App component tests (`src/App.test.jsx`)\n- Counter utility tests (`src/utils/counterUtils.test.js`)\n\nPlease fix the failing tests and run `:runMerge` again.'
            });

            // React to the original comment with failure
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'thumbs_down'
            });
